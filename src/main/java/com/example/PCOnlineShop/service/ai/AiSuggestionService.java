package com.example.PCOnlineShop.service.ai;

import com.example.PCOnlineShop.dto.ai.AiPcBuildCriteria;
import com.example.PCOnlineShop.dto.ai.AiPcBuildRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

/**
 * Service để phân tích yêu cầu và tạo tiêu chí PC build
 * ĐÂY LÀ PHIÊN BẢN PHÔI - Tạm thời không dùng AI API, chỉ dùng logic đơn giản
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class AiSuggestionService {

    /**
     * Phân tích yêu cầu của user và trả về tiêu chí
     * TODO: Tích hợp với OpenAI API sau này
     */
    public AiPcBuildCriteria analyzeBuildRequirement(AiPcBuildRequest request) {
        log.info("Analyzing build requirement: {}", request.getRequirement());

        AiPcBuildCriteria criteria = new AiPcBuildCriteria();

        // Parse yêu cầu đơn giản bằng keyword
        String req = request.getRequirement().toLowerCase();

        // Xác định use case
        if (req.contains("game") || req.contains("chơi")) {
            criteria.setUseCase("gaming");
            criteria.setGpuPerformanceLevel("high");
            criteria.setCpuPerformanceLevel("high");
            criteria.setMinRamCapacity(16);
            criteria.setRamType("DDR4");
            criteria.setMinStorageCapacity(512);
            criteria.setStorageType("SSD");

        } else if (req.contains("đồ họa") || req.contains("render") || req.contains("thiết kế") || req.contains("workstation")) {
            criteria.setUseCase("workstation");
            criteria.setGpuPerformanceLevel("high");
            criteria.setCpuPerformanceLevel("high");
            criteria.setMinRamCapacity(32);
            criteria.setRamType("DDR4");
            criteria.setMinStorageCapacity(1024);
            criteria.setStorageType("NVMe");

        } else if (req.contains("văn phòng") || req.contains("office") || req.contains("học tập")) {
            criteria.setUseCase("office");
            criteria.setGpuPerformanceLevel("low");
            criteria.setCpuPerformanceLevel("medium");
            criteria.setMinRamCapacity(8);
            criteria.setRamType("DDR4");
            criteria.setMinStorageCapacity(256);
            criteria.setStorageType("SSD");

        } else {
            // Default: general purpose
            criteria.setUseCase("general");
            criteria.setGpuPerformanceLevel("medium");
            criteria.setCpuPerformanceLevel("medium");
            criteria.setMinRamCapacity(16);
            criteria.setRamType("DDR4");
            criteria.setMinStorageCapacity(512);
            criteria.setStorageType("SSD");
        }

        // Phân bổ ngân sách nếu có
        if (request.getBudget() != null && request.getBudget() > 0) {
            allocateBudget(criteria, request.getBudget());
        }

        criteria.setAdditionalNotes("Generated by simple rule-based system. TODO: Replace with AI.");

        return criteria;
    }

    /**
     * Phân bổ ngân sách cho các linh kiện
     */
    private void allocateBudget(AiPcBuildCriteria criteria, Double totalBudget) {
        // Tỉ lệ phân bổ ngân sách tùy theo use case
        switch (criteria.getUseCase()) {
            case "gaming":
                criteria.setGpuBudget(totalBudget * 0.40);      // 40%
                criteria.setCpuBudget(totalBudget * 0.25);      // 25%
                criteria.setMainboardBudget(totalBudget * 0.12); // 12%
                criteria.setRamBudget(totalBudget * 0.10);      // 10%
                criteria.setStorageBudget(totalBudget * 0.05);  // 5%
                criteria.setPsuBudget(totalBudget * 0.05);      // 5%
                criteria.setCaseBudget(totalBudget * 0.02);     // 2%
                criteria.setCoolingBudget(totalBudget * 0.01);  // 1%
                break;

            case "workstation":
                criteria.setCpuBudget(totalBudget * 0.35);      // 35%
                criteria.setGpuBudget(totalBudget * 0.30);      // 30%
                criteria.setRamBudget(totalBudget * 0.15);      // 15%
                criteria.setMainboardBudget(totalBudget * 0.10); // 10%
                criteria.setStorageBudget(totalBudget * 0.05);  // 5%
                criteria.setPsuBudget(totalBudget * 0.03);      // 3%
                criteria.setCaseBudget(totalBudget * 0.01);     // 1%
                criteria.setCoolingBudget(totalBudget * 0.01);  // 1%
                break;

            case "office":
                criteria.setCpuBudget(totalBudget * 0.30);      // 30%
                criteria.setMainboardBudget(totalBudget * 0.20); // 20%
                criteria.setRamBudget(totalBudget * 0.15);      // 15%
                criteria.setStorageBudget(totalBudget * 0.15);  // 15%
                criteria.setGpuBudget(totalBudget * 0.10);      // 10%
                criteria.setPsuBudget(totalBudget * 0.05);      // 5%
                criteria.setCaseBudget(totalBudget * 0.03);     // 3%
                criteria.setCoolingBudget(totalBudget * 0.02);  // 2%
                break;

            default:
                // General purpose
                criteria.setGpuBudget(totalBudget * 0.30);
                criteria.setCpuBudget(totalBudget * 0.25);
                criteria.setMainboardBudget(totalBudget * 0.15);
                criteria.setRamBudget(totalBudget * 0.12);
                criteria.setStorageBudget(totalBudget * 0.08);
                criteria.setPsuBudget(totalBudget * 0.05);
                criteria.setCaseBudget(totalBudget * 0.03);
                criteria.setCoolingBudget(totalBudget * 0.02);
        }
    }
}

